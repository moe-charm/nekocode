⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️

    【超重要】std::regex 使用禁止！

⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️

このディレクトリ内では std::regex の使用は完全に禁止されています。

❌ やってはいけないこと:
  #include <regex>
  std::regex pattern("...");
  std::sregex_iterator
  std::regex_match
  std::regex_search

✅ 代わりに使うべきもの:
  1. PEGTL (推奨)
     #include <tao/pegtl.hpp>
     
  2. 単純な文字列処理
     content.find("...")
     content.substr(...)
     
  3. BaseAnalyzer のヘルパー関数
     extract_next_word()
     skip_until()
     skip_string_literal()

📝 理由:
  - std::regex は遅い（PEGTLの10-50倍遅い）
  - ネスト構造を正しく扱えない
  - 文脈を理解できない
  - メンテナンスが困難
  - Claudeが無意識に使いたがる悪い癖

🎯 新しいアナライザーを作る時:
  1. まず include/nekocode/analyzers/base_analyzer.hpp を読む
  2. PEGTL文法定義から始める
  3. std::regex の誘惑に負けない

💡 Claudeへのメッセージ:
  また std::regex 使いたくなってるでしょ？
  深呼吸して、PEGTL使うにゃ！
  正規表現は麻薬だから、最初から使わないのが大事にゃ！

このファイルを見たら、必ず PEGTL で実装することを思い出してください。
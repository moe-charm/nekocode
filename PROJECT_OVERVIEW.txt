# NekoCode Project Overview

## What is NekoCode?
NekoCode is a high-performance, multi-language code analyzer written in C++. It's designed to be 10-100x faster than traditional Python-based analyzers while providing comprehensive code analysis capabilities.

## Key Features
- **Multi-language Support**: C++, TypeScript, JavaScript, Python, C#, Go, Rust, Unity C#
- **Ultra-fast Performance**: Parallel processing with multi-threading support
- **AI-Optimized Output**: JSON format perfect for Claude, ChatGPT, and other AI tools
- **Low Memory Usage**: Efficient C++ implementation
- **Comprehensive Analysis**: Functions, classes, complexity metrics, imports/exports

## Target Users
1. **AI Developers**: Using code analysis for AI prompts
2. **Code Reviewers**: Quick codebase understanding
3. **Project Managers**: Code complexity assessment
4. **Developers**: Finding symbols, analyzing dependencies

## Technical Architecture
```
src/
├── lib/           # Core library (analyzers, formatters)
├── apps/          # CLI applications
├── utils/         # Utility functions
└── legacy/        # Legacy compatibility code
```

## Performance Benchmarks
- TypeScript (core.d.ts): 2,362 functions detected
- Analysis speed: 30+ files in ~120ms
- Memory efficient: Handles large codebases

## Build Requirements
- C++17 compiler
- CMake 3.16+
- Optional: nlohmann/json, UTF8-CPP, PEGTL (auto-fetched)

## Quick Start
```bash
git clone https://github.com/moe-charm/nekocode
cd nekocode
mkdir build && cd build
cmake ..
make -j$(nproc)
./bin/nekocode_ai --help
```

## Design Philosophy
- **Simplicity First**: Easy to build, easy to use
- **Performance Critical**: Every millisecond counts
- **AI-Friendly**: Output designed for LLM consumption
- **Extensible**: Easy to add new language analyzers
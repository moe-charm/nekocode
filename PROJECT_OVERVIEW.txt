🤖 NekoCode C++ - CLAUDE CODE向け即理解ガイド
================================================================

【CRITICAL】このファイルを最初に読んでください！

プロジェクト: 超高速コード解析エンジン（C++17）
用途: 多言語プロジェクトの構造・複雑度・依存関係分析
状態: 本格運用中（企業レベル対応済み）

🎯 Claude Code向け重要情報
---------------------------
✅ このプロジェクトはClaude Code専用に最適化済み
✅ AIによる自動ビルド・実行に完全対応
✅ JSON出力でAI処理に最適化
✅ セッション管理で高速連続分析が可能

🚀 3秒でスタート（Claude Codeなら自動実行）
------------------------------------------
1. cd build && cmake .. && make -j8
2. ./nekocode_ai session-create src/
3. ./nekocode_ai session-cmd <session_id> stats

💡 主要機能（即使用可能）
-------------------------
• stats           - プロジェクト統計（ファイル数・行数・複雑度）
• complexity      - 複雑度ランキング（リファクタ対象特定）
• large-files     - 大きいファイル検出（--threshold オプション対応）
• duplicates      - 重複ファイル検出（バックアップ・古いバージョン）
• todo            - TODOコメント検出（優先度別）
• find <symbol>   - シンボル検索（関数・変数・クラス）

🌍 対応言語（全て本格対応済み）
-------------------------------
• JavaScript/TypeScript - 2,362関数検出実績（enterprise級）
• C++/C                 - 959KB大型ファイル対応
• Python               - インデント構文完全対応
• C#                   - Unity/.NET両対応
• Go/Rust              - 基本対応

📊 実績（2025年7月現在）
------------------------
• TypeScript Compiler: 53,766行 → 2,362関数検出（590倍改善）
• nlohmann/json: 959KB → 254関数・123クラス完全解析
• lodash.js: 544KB → 489関数検出
• .NET Runtime: エンタープライズレベル対応確認済み

🔧 Claude Code向け最適化機能
-----------------------------
• 並列処理 - 最大8倍高速化（--ssd/--hddモード）
• リアルタイムプログレス - 大型プロジェクト監視
• セッション管理 - 180倍高速連続コマンド実行
• コンパクトJSON - AI処理効率化

⚡ よく使うコマンド例
---------------------
# 基本分析
./nekocode_ai session-create /path/to/project
./nekocode_ai session-cmd <session_id> stats

# リファクタリング準備
./nekocode_ai session-cmd <session_id> complexity
./nekocode_ai session-cmd <session_id> large-files --threshold 500
./nekocode_ai session-cmd <session_id> duplicates

# 開発支援
./nekocode_ai session-cmd <session_id> todo
./nekocode_ai session-cmd <session_id> "find main"

📁 重要なファイルの場所
-----------------------
• CLAUDE_QUICKSTART.md     - Claude Code向け詳細ガイド
• README.md                - プロジェクト全体説明
• docs/claude-code/        - Claude Code専用ドキュメント
• src/analyzers/           - 言語別解析エンジン
• include/nekocode/        - ヘッダーファイル
• build/                   - ビルド成果物
• sessions/                - 解析セッションデータ

🚨 Claude Code向け注意事項
---------------------------
• ビルド必須: C++17コンパイラ + CMake3.10+
• 自動並列化: CPUコア数に応じて最適化
• メモリ効率: Python版より大幅削減
• エラー処理: JSON形式で詳細エラー情報提供

🎯 トラブルシューティング
-------------------------
• ビルドエラー → rebuild.sh実行
• セッション不明 → ls sessions/ で確認
• 大型プロジェクト → --progress オプション使用
• 権限エラー → 絶対パス使用

================================================================
🤖 Claude Code: このファイル読了後、CLAUDE_QUICKSTART.mdを参照
================================================================